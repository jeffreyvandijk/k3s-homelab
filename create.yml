---
- name: Proxmox - Kubernetes Cluster
  hosts: kubernetes
  gather_facts: false

  tasks:

    - name: Proxmox // Clone VM Template // kube-cluster
      community.proxmox.proxmox_kvm:
        api_user: root@pam
        api_password: Dev0ps2025
        api_host: pve.lan
        clone: ubuntu-2204-template
        vmid: 999
        newid: "{{ id }}"
        name: "{{ inventory_hostname }}"
        node: pve
        storage: local-lvm
        format: qcow2
        timeout: 1000
      delegate_to: localhost
      throttle: 1

    - name: Proxmox // Network // kube-cluster
      community.proxmox.proxmox_kvm:
        api_user: root@pam
        api_password: Dev0ps2025
        api_host: pve.lan
        name: "{{ inventory_hostname }}"
        node: pve
        ipconfig:
          ipconfig0: 'ip={{ ip }},gw=192.168.1.1'
        update: true
      delegate_to: localhost

    - name: Proxmox // Start VM // kube-cluster
      community.proxmox.proxmox_kvm:
        api_user: root@pam
        api_password: Dev0ps2025
        api_host: pve.lan
        name: "{{ inventory_hostname }}"
        node: pve
        state: started
      delegate_to: localhost
      throttle: 1

    - name: Ansible // Wait for kube-cluster to be reachable
      ansible.builtin.wait_for:
        timeout: 300
      delegate_to: localhost

    - name: Linux // Install k3s on kube-control-01
      ansible.builtin.shell: |
        curl -sfL https://get.k3s.io | sh -s - server \
          --cluster-init \
          --node-taint "CriticalAddonsOnly=true:NoExecute" \
          --tls-san 192.168.1.30 \
          --write-kubeconfig-mode 644
      args:
        executable: /bin/bash
      changed_when: false
      delegate_to: kube-control-01
      run_once: true

    - name: Linux // Get k3s token from kube-control-01
      ansible.builtin.shell: sudo cat /var/lib/rancher/k3s/server/node-token
      args:
        executable: /bin/bash
      register: k3s_token
      delegate_to: kube-control-01
      run_once: true

    - name: Linux // Install k3s on kube-control-02
      ansible.builtin.shell: |
        curl -sfL https://get.k3s.io | K3S_URL=https://192.168.1.30:6443 K3S_TOKEN={{ k3s_token.stdout }} sh -s - server \
        --node-taint CriticalAddonsOnly=true:NoExecute \
        --tls-san 192.168.1.30 \
        --write-kubeconfig-mode 644
      args:
        executable: /bin/bash
      changed_when: false
      delegate_to: kube-control-02
      run_once: true

    - name: Linux // Install k3s on kube-workers
      ansible.builtin.shell: curl -sfL https://get.k3s.io | K3S_URL=https://192.168.1.30:6443 K3S_TOKEN={{ k3s_token.stdout }} sh -
      args:
        executable: /bin/bash
      changed_when: false
      when: inventory_hostname in groups['worker']

    - name: Linux // Update & Install open-iscsi
      ansible.builtin.apt:
        name: open-iscsi
        update_cache: true
      become: true

    - name: Linux // Enable and start open-iscsi
      ansible.builtin.systemd_service:
        name: open-iscsi
        state: started
        enabled: true
      become: true

    - name: Linux // Download Helm
      ansible.builtin.shell: curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      args:
        executable: /bin/bash
      changed_when: false
      when: inventory_hostname == "kube-control-01"

    - name: Linux // Chmod get_helm.sh
      ansible.builtin.shell: chmod 700 get_helm.sh
      args:
        executable: /bin/bash
      changed_when: false
      when: inventory_hostname == "kube-control-01"

    - name: Linux // Install Helm
      ansible.builtin.shell: ./get_helm.sh
      args:
        executable: /bin/bash
      changed_when: false
      when: inventory_hostname == "kube-control-01"

    - name: Helm // Helm add repo longhorn
      ansible.builtin.shell: helm repo add longhorn https://charts.longhorn.io
      args:
        executable: /bin/bash
      changed_when: false
      when: inventory_hostname == "kube-control-01"

    - name: Helm // Helm repo update
      ansible.builtin.shell: helm repo update
      args:
        executable: /bin/bash
      changed_when: false
      when: inventory_hostname == "kube-control-01"

    - name: Kubernetes // kubectl create namespace longhorn-system
      ansible.builtin.shell: kubectl create namespace longhorn-system
      args:
        executable: /bin/bash
      changed_when: false
      when: inventory_hostname == "kube-control-01"

    - name: Helm // Install longhorn-system
      ansible.builtin.shell: export KUBECONFIG=/etc/rancher/k3s/k3s.yaml && helm install longhorn longhorn/longhorn --namespace longhorn-system
      args:
        executable: /bin/bash
      changed_when: false
      when: inventory_hostname == "kube-control-01"
      failed_when: false

    - name: Ansible // Wait for longhorn to be installed into the cluster
      ansible.builtin.wait_for:
        timeout: 300
      delegate_to: localhost
      run_once: true

    - name: Kubernetes // Patch storageclass to longhorn
      ansible.builtin.shell: |
        kubectl patch storageclass longhorn -p '{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'
      args:
        executable: /bin/bash
      changed_when: false
      when: inventory_hostname == "kube-control-01"

    - name: Ansible // Import AWX deployment
      ansible.builtin.import_tasks:
        file: awx.yaml
